.dx-fieldset
	.dx-fieldset-header Programado y Ejecutado Mensual
	.dx-field
		.dx-field-label Operación
		.dx-field-value
			#slcOperacion
	.dx-field
		.dx-field-label Año
		.dx-field-value
			#slcAnos
#dgdProgEjecMensual.margin-bottom
#chtProgEjecMensual

script.

	var operaciones = !{JSON.stringify(operaciones)},
		años = [2017, 2018, 2019, 2020],
		dataGrid,
		dataSource = new DevExpress.data.DataSource({
			store: operaciones,
			key: 'cod_operacion',
			group: 'abrev_organismo_financiero'
		})
	
	function obtenerMeses(operacion, año) {

		$.ajax({
			type: 'POST',
			url: '/pym/reportes/mProgEjecMensual',
			data: {
				operacion: operacion,
				año: año,
				json: true
			},
			dataType: 'json',
			encode: true,
			beforeSend: () => {
				$('.spinner').show()
			}
		})
		.done( (response) => {

			let totalProg = 0
				totalEjec = 0

			for (let i = 0, len = response.length, month = new Date().getMonth(); i < len; i++) {
				totalProg += response[i].programado
				totalEjec += response[i].ejecutado

				if (response[i].cod_mes <= month + 1 && response[i].programado > 0)
					response[i].ejecutado_2 = response[i].ejecutado
			}

			$('#dgdProgEjecMensual').dxDataGrid({
				dataSource: response,
				paging: {
					pageSize: 12
				},
				/*
				pager: {
					showPageSizeSelector: true,
					allowedPageSizes: [5, 10, 20],
					showInfo: true
				},
				*/
				columnAutoWidth: true,
				showColumnLines: false,
				showRowLines: true,
				rowAlternationEnabled: true,
				showBorders: false,
				columnHidingEnabled: true,
				wordWrapEnabled: true,
				/*
				allowColumnReordering: true,
				allowColumnResizing: true,
				width: $('section').width(),
				'export': {
					enabled: true,
					fileName: 'POA_PEP_' + $('#frmFiltros').dxForm('instance').getEditor('cod_operacion').option('text') + '_AÑO_' + $('#frmFiltros').dxForm('instance').getEditor('año_actividad').option('text')
				},
				columnFixing: { 
					enabled: true
				},
				scrolling: {
					useNative: true
				},
				*/
				columns: [
					{
						dataField: 'cod_mes',
						sortOrder: 'asc',
						visible: false
					},
					{
						dataField: 'desc_mes',
						caption: 'Mes'
					},
					{
						dataField: 'programado',
						caption: 'Programado',
						calculateDisplayValue: (data) => {
							return '$' + data.programado.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,')
						}
					},
					{
						dataField: 'ejecutado',
						caption: 'Ejecutado',
						calculateDisplayValue: (data) => {
							return '$' + data.ejecutado.toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,')
						}
					},
					{
						dataField: 'porcentaje',
						caption: '% Ejecución',
						calculateDisplayValue: (data) => {
							if (data.programado > 0) {
								return ((data.ejecutado * 100) / data.programado ).toFixed(2) + '%'
							} else {
								return '0%'
							}
						}
					}
				],
				summary: {
					totalItems: [
						{
							column: 'desc_mes',
							summaryType: 'min',
							customizeText: (data) => {
								return 'TOTAL'
							}
						},
						{
							column: 'programado',
							summaryType: 'sum',
							customizeText: (data) => {
								return '$' + data.value.toFixed(2).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,')
							}
						},
						{
							column: 'ejecutado',
							summaryType: 'sum',
							customizeText: (data) => {
								return '$' + data.value.toFixed(2).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,')
							}
						},
						{
							column: 'porcentaje',
							summaryType: 'sum',
							customizeText: (data) => {
								return ( (totalEjec * 100) / totalProg ).toFixed(2) + '%'
							}
						}
					]
				}
			})

			$('#chtProgEjecMensual').dxChart({
				dataSource: response,
				commonSeriesSettings: {
					argumentField: 'desc_mes',
					type: 'bar',
					hoverMode: 'allArgumentPoints',
					selectionMode: 'allArgumentPoints',
					label: {
						visible: false,
						format: {
							type: 'fixedPoint',
							precision: 0
						},
						customizeText: (pointinfo) => {
							return '$' + pointinfo.valueText
						}
					}
				},
				series: [
					{ valueField: 'programado', name: 'Programado' },
					{
						type: 'line',
						valueField: 'ejecutado_2',
						name: 'Ejecutado',
					}
				],
				legend: {
					verticalAlignment: 'bottom',
					horizontalAlignment: 'center'
				},
				commonAxisSettings: {
					label: {
						alignment: 'center',
						displayMode: 'stagger',
						staggeringSpacing: 2
					}
				},
				tooltip: {
					enabled: true,
					customizeTooltip: (args) => {

						let valueText = '$' + args.originalValue.toFixed(2).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,'),
							porcentaje
						
						for (let i = 0, len = response.length; i < len; i++) {
							if (response[i].desc_mes === args.argument) {

								let porcentaje = 0,
									month = new Date().getMonth()

								if (response[i].programado > 0 && response[i].cod_mes <= month + 1) {
									porcentaje = ( (response[i].ejecutado * 100) / response[i].programado )

									html = `<div class="centrar">${args.argument} | ${args.seriesName}</div><div class="centrar">${valueText}</div><div class="centrar">% de ejecución: ${porcentaje.toFixed(2)}%</div>`
								} else {
									html = `<div class="centrar">${args.argument} | ${args.seriesName}</div><div class="centrar">${valueText}</div>`
								}
								break
							}
						}

						return {
							html: html
						}
					}
				}
			})

			$('.spinner').hide()
		})
	}
	
	$( () => {

		$("#slcAnos").dxSelectBox({
			items: años,
			placeholder: 'Seleccione un año',
			onValueChanged: (data) => {

				let operacion = $("#slcOperacion").dxSelectBox("instance").option('value')
				if (operacion != null)
					obtenerMeses(operacion, data.value)

			}
		})

		$('#slcOperacion').dxSelectBox({
			dataSource: dataSource,
			placeholder: 'Seleccione una operación',
			displayExpr: "nro_operacion",
			valueExpr: "cod_operacion",
			grouped: true,
			onValueChanged: (data) => {

				let año = $("#slcAnos").dxSelectBox("instance").option('value')
				if (año != null)
					obtenerMeses(data.value, año)

			}
		})

	})